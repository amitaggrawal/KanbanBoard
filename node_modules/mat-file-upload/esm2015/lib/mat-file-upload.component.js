/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
export class MatFileUploadComponent {
    constructor() {
        this.labelText = 'Select File(s)';
        this.allowMultipleFiles = false;
        this.showUploadButton = true;
        this.uploadClicked = new EventEmitter();
        this.selectedFilesChanged = new EventEmitter();
        this.selectedFileText = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?=} files
     * @return {?}
     */
    filesChanged(files) {
        this.selectedFiles = files;
        this.selectedFilesChanged.emit(this.selectedFiles);
        if (this.selectedFiles) {
            /** @type {?} */
            const numSelectedFiles = this.selectedFiles.length;
            this.selectedFileText =
                numSelectedFiles === 1
                    ? this.selectedFiles[0].name
                    : `${numSelectedFiles} files selected`;
        }
        else {
            this.selectedFileText = '';
        }
    }
    /**
     * @return {?}
     */
    uploadFiles() {
        this.uploadClicked.emit(this.selectedFiles);
    }
}
MatFileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-file-upload',
                template: `
    <span class="file-input-text">{{ labelText }}</span>
    <button
      mat-button
      color="primary"
      class="file-input-button"
      (click)="fileInput.click()"
      aria-label="Select File(s)"
    >
      <span>Select File(s)</span>
      <input
        #fileInput
        type="file"
        style="display: none"
        [multiple]="allowMultipleFiles"
        (change)="filesChanged($event.target.files)"
      />
    </button>
    <button
      mat-raised-button
      color="primary"
      class="file-input-button"
      [disabled]="!selectedFiles"
      (click)="uploadFiles()"
      *ngIf="showUploadButton"
      aria-label="Upload File(s)"
    >
      Upload
    </button>
    <span class="file-input-text">{{ selectedFileText }}</span>
    <button
      mat-icon-button
      (click)="filesChanged(null)"
      aria-label="Remove Selected File(s)"
    >
      <mat-icon>close</mat-icon>
    </button>
  `,
                styles: ['.file-input-button { margin-right: 8px !important }',
                    '.file-input-text { font-size: 14px !important; margin-right: 8px !important }']
            }] }
];
/** @nocollapse */
MatFileUploadComponent.ctorParameters = () => [];
MatFileUploadComponent.propDecorators = {
    labelText: [{ type: Input }],
    allowMultipleFiles: [{ type: Input }],
    showUploadButton: [{ type: Input }],
    uploadClicked: [{ type: Output }],
    selectedFilesChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MatFileUploadComponent.prototype.labelText;
    /** @type {?} */
    MatFileUploadComponent.prototype.allowMultipleFiles;
    /** @type {?} */
    MatFileUploadComponent.prototype.showUploadButton;
    /** @type {?} */
    MatFileUploadComponent.prototype.uploadClicked;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFilesChanged;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFiles;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFileText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZpbGUtdXBsb2FkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9tYXQtZmlsZS11cGxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBK0M5RSxNQUFNLE9BQU8sc0JBQXNCO0lBVWpDO1FBVFMsY0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQzVCLHVCQUFrQixHQUFHLEtBQUssQ0FBQTtRQUMxQixxQkFBZ0IsR0FBRyxJQUFJLENBQUE7UUFDdEIsa0JBQWEsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQTtRQUNwRSx5QkFBb0IsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQTtRQUdyRixxQkFBZ0IsR0FBRyxFQUFFLENBQUE7SUFFTixDQUFDOzs7O0lBRWhCLFFBQVEsS0FBSSxDQUFDOzs7OztJQUViLFlBQVksQ0FBQyxLQUFnQjtRQUMzQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQTtRQUMxQixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUNsRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7O2tCQUNoQixnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU07WUFDbEQsSUFBSSxDQUFDLGdCQUFnQjtnQkFDbkIsZ0JBQWdCLEtBQUssQ0FBQztvQkFDcEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtvQkFDNUIsQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCLGlCQUFpQixDQUFBO1NBQzNDO2FBQU07WUFDTCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO1NBQzNCO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDN0MsQ0FBQzs7O1lBM0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQ1Q7eUJBRUMscURBQXFEO29CQUNyRCwrRUFBK0U7YUFFbEY7Ozs7O3dCQUVFLEtBQUs7aUNBQ0wsS0FBSzsrQkFDTCxLQUFLOzRCQUNMLE1BQU07bUNBQ04sTUFBTTs7OztJQUpQLDJDQUFxQzs7SUFDckMsb0RBQW1DOztJQUNuQyxrREFBZ0M7O0lBQ2hDLCtDQUE4RTs7SUFDOUUsc0RBQXFGOztJQUVyRiwrQ0FBdUI7O0lBQ3ZCLGtEQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXQtZmlsZS11cGxvYWQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuIGNsYXNzPVwiZmlsZS1pbnB1dC10ZXh0XCI+e3sgbGFiZWxUZXh0IH19PC9zcGFuPlxuICAgIDxidXR0b25cbiAgICAgIG1hdC1idXR0b25cbiAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICBjbGFzcz1cImZpbGUtaW5wdXQtYnV0dG9uXCJcbiAgICAgIChjbGljayk9XCJmaWxlSW5wdXQuY2xpY2soKVwiXG4gICAgICBhcmlhLWxhYmVsPVwiU2VsZWN0IEZpbGUocylcIlxuICAgID5cbiAgICAgIDxzcGFuPlNlbGVjdCBGaWxlKHMpPC9zcGFuPlxuICAgICAgPGlucHV0XG4gICAgICAgICNmaWxlSW5wdXRcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIlxuICAgICAgICBbbXVsdGlwbGVdPVwiYWxsb3dNdWx0aXBsZUZpbGVzXCJcbiAgICAgICAgKGNoYW5nZSk9XCJmaWxlc0NoYW5nZWQoJGV2ZW50LnRhcmdldC5maWxlcylcIlxuICAgICAgLz5cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uXG4gICAgICBtYXQtcmFpc2VkLWJ1dHRvblxuICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgIGNsYXNzPVwiZmlsZS1pbnB1dC1idXR0b25cIlxuICAgICAgW2Rpc2FibGVkXT1cIiFzZWxlY3RlZEZpbGVzXCJcbiAgICAgIChjbGljayk9XCJ1cGxvYWRGaWxlcygpXCJcbiAgICAgICpuZ0lmPVwic2hvd1VwbG9hZEJ1dHRvblwiXG4gICAgICBhcmlhLWxhYmVsPVwiVXBsb2FkIEZpbGUocylcIlxuICAgID5cbiAgICAgIFVwbG9hZFxuICAgIDwvYnV0dG9uPlxuICAgIDxzcGFuIGNsYXNzPVwiZmlsZS1pbnB1dC10ZXh0XCI+e3sgc2VsZWN0ZWRGaWxlVGV4dCB9fTwvc3Bhbj5cbiAgICA8YnV0dG9uXG4gICAgICBtYXQtaWNvbi1idXR0b25cbiAgICAgIChjbGljayk9XCJmaWxlc0NoYW5nZWQobnVsbClcIlxuICAgICAgYXJpYS1sYWJlbD1cIlJlbW92ZSBTZWxlY3RlZCBGaWxlKHMpXCJcbiAgICA+XG4gICAgICA8bWF0LWljb24+Y2xvc2U8L21hdC1pY29uPlxuICAgIDwvYnV0dG9uPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICAnLmZpbGUtaW5wdXQtYnV0dG9uIHsgbWFyZ2luLXJpZ2h0OiA4cHggIWltcG9ydGFudCB9JyxcbiAgICAnLmZpbGUtaW5wdXQtdGV4dCB7IGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50OyBtYXJnaW4tcmlnaHQ6IDhweCAhaW1wb3J0YW50IH0nLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBNYXRGaWxlVXBsb2FkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbGFiZWxUZXh0ID0gJ1NlbGVjdCBGaWxlKHMpJ1xuICBASW5wdXQoKSBhbGxvd011bHRpcGxlRmlsZXMgPSBmYWxzZVxuICBASW5wdXQoKSBzaG93VXBsb2FkQnV0dG9uID0gdHJ1ZVxuICBAT3V0cHV0KCkgdXBsb2FkQ2xpY2tlZDogRXZlbnRFbWl0dGVyPEZpbGVMaXN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8RmlsZUxpc3Q+KClcbiAgQE91dHB1dCgpIHNlbGVjdGVkRmlsZXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8RmlsZUxpc3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxGaWxlTGlzdD4oKVxuXG4gIHNlbGVjdGVkRmlsZXM6IEZpbGVMaXN0XG4gIHNlbGVjdGVkRmlsZVRleHQgPSAnJ1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgZmlsZXNDaGFuZ2VkKGZpbGVzPzogRmlsZUxpc3QpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkRmlsZXMgPSBmaWxlc1xuICAgIHRoaXMuc2VsZWN0ZWRGaWxlc0NoYW5nZWQuZW1pdCh0aGlzLnNlbGVjdGVkRmlsZXMpXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRGaWxlcykge1xuICAgICAgY29uc3QgbnVtU2VsZWN0ZWRGaWxlcyA9IHRoaXMuc2VsZWN0ZWRGaWxlcy5sZW5ndGhcbiAgICAgIHRoaXMuc2VsZWN0ZWRGaWxlVGV4dCA9XG4gICAgICAgIG51bVNlbGVjdGVkRmlsZXMgPT09IDFcbiAgICAgICAgICA/IHRoaXMuc2VsZWN0ZWRGaWxlc1swXS5uYW1lXG4gICAgICAgICAgOiBgJHtudW1TZWxlY3RlZEZpbGVzfSBmaWxlcyBzZWxlY3RlZGBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZEZpbGVUZXh0ID0gJydcbiAgICB9XG4gIH1cblxuICB1cGxvYWRGaWxlcygpOiB2b2lkIHtcbiAgICB0aGlzLnVwbG9hZENsaWNrZWQuZW1pdCh0aGlzLnNlbGVjdGVkRmlsZXMpXG4gIH1cbn1cbiJdfQ==