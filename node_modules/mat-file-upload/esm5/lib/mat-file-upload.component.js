/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
var MatFileUploadComponent = /** @class */ (function () {
    function MatFileUploadComponent() {
        this.labelText = 'Select File(s)';
        this.allowMultipleFiles = false;
        this.showUploadButton = true;
        this.uploadClicked = new EventEmitter();
        this.selectedFilesChanged = new EventEmitter();
        this.selectedFileText = '';
    }
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?=} files
     * @return {?}
     */
    MatFileUploadComponent.prototype.filesChanged = /**
     * @param {?=} files
     * @return {?}
     */
    function (files) {
        this.selectedFiles = files;
        this.selectedFilesChanged.emit(this.selectedFiles);
        if (this.selectedFiles) {
            /** @type {?} */
            var numSelectedFiles = this.selectedFiles.length;
            this.selectedFileText =
                numSelectedFiles === 1
                    ? this.selectedFiles[0].name
                    : numSelectedFiles + " files selected";
        }
        else {
            this.selectedFileText = '';
        }
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.uploadFiles = /**
     * @return {?}
     */
    function () {
        this.uploadClicked.emit(this.selectedFiles);
    };
    MatFileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-file-upload',
                    template: "\n    <span class=\"file-input-text\">{{ labelText }}</span>\n    <button\n      mat-button\n      color=\"primary\"\n      class=\"file-input-button\"\n      (click)=\"fileInput.click()\"\n      aria-label=\"Select File(s)\"\n    >\n      <span>Select File(s)</span>\n      <input\n        #fileInput\n        type=\"file\"\n        style=\"display: none\"\n        [multiple]=\"allowMultipleFiles\"\n        (change)=\"filesChanged($event.target.files)\"\n      />\n    </button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      class=\"file-input-button\"\n      [disabled]=\"!selectedFiles\"\n      (click)=\"uploadFiles()\"\n      *ngIf=\"showUploadButton\"\n      aria-label=\"Upload File(s)\"\n    >\n      Upload\n    </button>\n    <span class=\"file-input-text\">{{ selectedFileText }}</span>\n    <button\n      mat-icon-button\n      (click)=\"filesChanged(null)\"\n      aria-label=\"Remove Selected File(s)\"\n    >\n      <mat-icon>close</mat-icon>\n    </button>\n  ",
                    styles: ['.file-input-button { margin-right: 8px !important }',
                        '.file-input-text { font-size: 14px !important; margin-right: 8px !important }']
                }] }
    ];
    /** @nocollapse */
    MatFileUploadComponent.ctorParameters = function () { return []; };
    MatFileUploadComponent.propDecorators = {
        labelText: [{ type: Input }],
        allowMultipleFiles: [{ type: Input }],
        showUploadButton: [{ type: Input }],
        uploadClicked: [{ type: Output }],
        selectedFilesChanged: [{ type: Output }]
    };
    return MatFileUploadComponent;
}());
export { MatFileUploadComponent };
if (false) {
    /** @type {?} */
    MatFileUploadComponent.prototype.labelText;
    /** @type {?} */
    MatFileUploadComponent.prototype.allowMultipleFiles;
    /** @type {?} */
    MatFileUploadComponent.prototype.showUploadButton;
    /** @type {?} */
    MatFileUploadComponent.prototype.uploadClicked;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFilesChanged;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFiles;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedFileText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZpbGUtdXBsb2FkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9tYXQtZmlsZS11cGxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRTlFO0lBdURFO1FBVFMsY0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQzVCLHVCQUFrQixHQUFHLEtBQUssQ0FBQTtRQUMxQixxQkFBZ0IsR0FBRyxJQUFJLENBQUE7UUFDdEIsa0JBQWEsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQTtRQUNwRSx5QkFBb0IsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQTtRQUdyRixxQkFBZ0IsR0FBRyxFQUFFLENBQUE7SUFFTixDQUFDOzs7O0lBRWhCLHlDQUFROzs7SUFBUixjQUFZLENBQUM7Ozs7O0lBRWIsNkNBQVk7Ozs7SUFBWixVQUFhLEtBQWdCO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFBO1FBQzFCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQ2xELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTs7Z0JBQ2hCLGdCQUFnQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTTtZQUNsRCxJQUFJLENBQUMsZ0JBQWdCO2dCQUNuQixnQkFBZ0IsS0FBSyxDQUFDO29CQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUM1QixDQUFDLENBQUksZ0JBQWdCLG9CQUFpQixDQUFBO1NBQzNDO2FBQU07WUFDTCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO1NBQzNCO0lBQ0gsQ0FBQzs7OztJQUVELDRDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUM3QyxDQUFDOztnQkEzRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFFBQVEsRUFBRSw2K0JBcUNUOzZCQUVDLHFEQUFxRDt3QkFDckQsK0VBQStFO2lCQUVsRjs7Ozs7NEJBRUUsS0FBSztxQ0FDTCxLQUFLO21DQUNMLEtBQUs7Z0NBQ0wsTUFBTTt1Q0FDTixNQUFNOztJQTBCVCw2QkFBQztDQUFBLEFBNUVELElBNEVDO1NBL0JZLHNCQUFzQjs7O0lBQ2pDLDJDQUFxQzs7SUFDckMsb0RBQW1DOztJQUNuQyxrREFBZ0M7O0lBQ2hDLCtDQUE4RTs7SUFDOUUsc0RBQXFGOztJQUVyRiwrQ0FBdUI7O0lBQ3ZCLGtEQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXQtZmlsZS11cGxvYWQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuIGNsYXNzPVwiZmlsZS1pbnB1dC10ZXh0XCI+e3sgbGFiZWxUZXh0IH19PC9zcGFuPlxuICAgIDxidXR0b25cbiAgICAgIG1hdC1idXR0b25cbiAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICBjbGFzcz1cImZpbGUtaW5wdXQtYnV0dG9uXCJcbiAgICAgIChjbGljayk9XCJmaWxlSW5wdXQuY2xpY2soKVwiXG4gICAgICBhcmlhLWxhYmVsPVwiU2VsZWN0IEZpbGUocylcIlxuICAgID5cbiAgICAgIDxzcGFuPlNlbGVjdCBGaWxlKHMpPC9zcGFuPlxuICAgICAgPGlucHV0XG4gICAgICAgICNmaWxlSW5wdXRcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIlxuICAgICAgICBbbXVsdGlwbGVdPVwiYWxsb3dNdWx0aXBsZUZpbGVzXCJcbiAgICAgICAgKGNoYW5nZSk9XCJmaWxlc0NoYW5nZWQoJGV2ZW50LnRhcmdldC5maWxlcylcIlxuICAgICAgLz5cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uXG4gICAgICBtYXQtcmFpc2VkLWJ1dHRvblxuICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgIGNsYXNzPVwiZmlsZS1pbnB1dC1idXR0b25cIlxuICAgICAgW2Rpc2FibGVkXT1cIiFzZWxlY3RlZEZpbGVzXCJcbiAgICAgIChjbGljayk9XCJ1cGxvYWRGaWxlcygpXCJcbiAgICAgICpuZ0lmPVwic2hvd1VwbG9hZEJ1dHRvblwiXG4gICAgICBhcmlhLWxhYmVsPVwiVXBsb2FkIEZpbGUocylcIlxuICAgID5cbiAgICAgIFVwbG9hZFxuICAgIDwvYnV0dG9uPlxuICAgIDxzcGFuIGNsYXNzPVwiZmlsZS1pbnB1dC10ZXh0XCI+e3sgc2VsZWN0ZWRGaWxlVGV4dCB9fTwvc3Bhbj5cbiAgICA8YnV0dG9uXG4gICAgICBtYXQtaWNvbi1idXR0b25cbiAgICAgIChjbGljayk9XCJmaWxlc0NoYW5nZWQobnVsbClcIlxuICAgICAgYXJpYS1sYWJlbD1cIlJlbW92ZSBTZWxlY3RlZCBGaWxlKHMpXCJcbiAgICA+XG4gICAgICA8bWF0LWljb24+Y2xvc2U8L21hdC1pY29uPlxuICAgIDwvYnV0dG9uPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICAnLmZpbGUtaW5wdXQtYnV0dG9uIHsgbWFyZ2luLXJpZ2h0OiA4cHggIWltcG9ydGFudCB9JyxcbiAgICAnLmZpbGUtaW5wdXQtdGV4dCB7IGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50OyBtYXJnaW4tcmlnaHQ6IDhweCAhaW1wb3J0YW50IH0nLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBNYXRGaWxlVXBsb2FkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbGFiZWxUZXh0ID0gJ1NlbGVjdCBGaWxlKHMpJ1xuICBASW5wdXQoKSBhbGxvd011bHRpcGxlRmlsZXMgPSBmYWxzZVxuICBASW5wdXQoKSBzaG93VXBsb2FkQnV0dG9uID0gdHJ1ZVxuICBAT3V0cHV0KCkgdXBsb2FkQ2xpY2tlZDogRXZlbnRFbWl0dGVyPEZpbGVMaXN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8RmlsZUxpc3Q+KClcbiAgQE91dHB1dCgpIHNlbGVjdGVkRmlsZXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8RmlsZUxpc3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxGaWxlTGlzdD4oKVxuXG4gIHNlbGVjdGVkRmlsZXM6IEZpbGVMaXN0XG4gIHNlbGVjdGVkRmlsZVRleHQgPSAnJ1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgZmlsZXNDaGFuZ2VkKGZpbGVzPzogRmlsZUxpc3QpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkRmlsZXMgPSBmaWxlc1xuICAgIHRoaXMuc2VsZWN0ZWRGaWxlc0NoYW5nZWQuZW1pdCh0aGlzLnNlbGVjdGVkRmlsZXMpXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRGaWxlcykge1xuICAgICAgY29uc3QgbnVtU2VsZWN0ZWRGaWxlcyA9IHRoaXMuc2VsZWN0ZWRGaWxlcy5sZW5ndGhcbiAgICAgIHRoaXMuc2VsZWN0ZWRGaWxlVGV4dCA9XG4gICAgICAgIG51bVNlbGVjdGVkRmlsZXMgPT09IDFcbiAgICAgICAgICA/IHRoaXMuc2VsZWN0ZWRGaWxlc1swXS5uYW1lXG4gICAgICAgICAgOiBgJHtudW1TZWxlY3RlZEZpbGVzfSBmaWxlcyBzZWxlY3RlZGBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZEZpbGVUZXh0ID0gJydcbiAgICB9XG4gIH1cblxuICB1cGxvYWRGaWxlcygpOiB2b2lkIHtcbiAgICB0aGlzLnVwbG9hZENsaWNrZWQuZW1pdCh0aGlzLnNlbGVjdGVkRmlsZXMpXG4gIH1cbn1cbiJdfQ==